// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String?    @unique
  password_hash String?
  password_salt String?
  image_url   String?
  provider    String?
  provider_user_id String?
  createdAt   DateTime  @default(now())
  conversations Conversation[]
}

model Conversation {
  id             String     @id @default(uuid())
  title          String
  user           User       @relation(fields: [userId], references: [id])
  userId         String

  promptSettings String

  messages       Message[]  // relation to individual message entries

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@index([updatedAt])
}

model Message {
  id             String        @id @default(uuid())
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String

  role           String        // e.g., "user", "assistant"
  content        String
  timestamp      DateTime      @default(now())

  @@index([conversationId])
  @@index([timestamp])
}

model ContentCategory {
  id          String        @id @default(uuid())
  name        String        @unique
  description String
  types       ContentType[] // Relation: one category -> many types

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ContentType {
  id                      String         @id @default(uuid())
  name                    String         @unique
  description             String
  temperature             Float          @default(0.7) // Recommended range: 0.2 - 1.0
  categoryId              String
  defaultContentToneId      String         
  defaultContentFormatId  String
  defaultAudienceId       String

  category                ContentCategory @relation(fields: [categoryId], references: [id])

  tones                   ContentTone[]    @relation("ManyToManyContentTones") // Many-to-many relation with ContentTone
  formats                 ContentFormat[] @relation("ManyToManyContentFormats") // Many-to-many relation with ContentFormat
  audiences               Audience[]     @relation("ManyToManyAudiences") // Many-to-many relation with Audience

  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
}

model ContentTone {
  id          String         @id @default(uuid())
  name        String         @unique
  description String

  types       ContentType[]  @relation("ManyToManyContentTones")

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ContentFormat {
  id          String         @id @default(uuid())
  name        String         @unique
  description String

  types       ContentType[]  @relation("ManyToManyContentFormats")

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Audience {
  id          String         @id @default(uuid())
  name        String         @unique
  description String

  types       ContentType[]  @relation("ManyToManyAudiences")

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
