// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String?    @unique
  password_hash String?
  password_salt String?
  image_url   String?
  provider    String?
  provider_user_id String?
  createdAt   DateTime  @default(now())
  conversations Conversation[]
}

model Conversation {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  String[]
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentCategory {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  types       ContentType[] // Relation: one category -> many types

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ContentType {
  id                String         @id @default(uuid())
  name              String         @unique
  description       String
  categoryId        String
  defaultToneId     String?         
  defaultFormatId   String?
  defaultAudienceId String?

  category          ContentCategory @relation(fields: [categoryId], references: [id])
  defaultTone       ToneStyle?      @relation("ToneStyleForContentType", fields: [defaultToneId], references: [id])
  defaultFormat     ContentFormat?  @relation("ContentFormatForContentType", fields: [defaultFormatId], references: [id])
  defaultAudience   Audience?       @relation("AudienceForContentType", fields: [defaultAudienceId], references: [id])

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ToneStyle {
  id          String         @id @default(uuid())
  name        String         @unique
  types       ContentType[]  @relation("ToneStyleForContentType")

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ContentFormat {
  id          String         @id @default(uuid())
  name        String         @unique
  types       ContentType[]  @relation("ContentFormatForContentType")

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Audience {
  id          String         @id @default(uuid())
  name        String         @unique
  types       ContentType[]  @relation("AudienceForContentType")

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
